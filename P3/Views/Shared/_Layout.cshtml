<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>iSchool Web App - @ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/P3.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/datatables.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/jquery-ui.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/jquery.modal.css" asp-append-version="true" />

    <style>
        #goToTopBtn {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 30px;
            z-index: 99;
            font-size: 28px;
            font-weight: bold;
            border: none;
            outline: none;
            background-color: #F76902;
            border: white 2px outset;
            color: white;
            cursor: pointer;
            padding: 10px;
            border-radius: 4px;
        }

        #goToTopBtn:hover {
            background-color: #FFFFFF;
            color: #F76902;
        }

        #goToTopBtn.active {
                border: #FFFFFF 2px inset;
        }
    </style>
</head>
<body>
    <header>
        <nav style="height:80px;" class="fixed-top navbar navbar-expand-sm navbar-light custom-header box-shadow mb-3">
            <div class="container-fluid">
                <a style="padding-top: 0; padding-bottom: 0; margin-right: 1rem; font-size: 2.5rem; margin-left: .5rem;" class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">iSchool</a>
                <div class="Override-Bootstrap-Button">
                    <div class="Override-Bootstrap-TOP"></div>
                    <div class="Override-Bootstrap-MIDDLE" />
                </div>
                <div class="Override-Bootstrap-BOTTOM" />
            </div>
            </div>
            <div class="navbar-collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1 nav-menu">
                    <!-- This code checks if the current action is "Index" and controller is "Home". If so, it adds the "active" class to the <li> element. -->
                    <li class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Index" && ViewContext.RouteData.Values["Controller"].ToString() == "Home" ? "active" : "")">
                        <a style="color:#FFFFFF !important; font-size: 1.5rem;" class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                    </li>
                    <!-- This code checks if the current action is "People" and controller is "Home". If so, it adds the "active" class to the <li> element. -->
                    <li class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "People" && ViewContext.RouteData.Values["Controller"].ToString() == "Home" ? "active" : "")">
                        <a style="color:#FFFFFF !important; font-size: 1.5rem;" class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="People">People</a>
                    </li>
                    <!-- This code checks if the current action is "Degrees" and controller is "Home". If so, it adds the "active" class to the <li> element. -->
                    <li class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Degrees" && ViewContext.RouteData.Values["Controller"].ToString() == "Home" ? "active" : "")">
                        <a style="color:#FFFFFF !important; font-size: 1.5rem;" class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Degrees">Degrees</a>
                    </li>
                    <!-- This code checks if the current action is "Minors" and controller is "Home". If so, it adds the "active" class to the <li> element. -->
                    <li class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Minors" && ViewContext.RouteData.Values["Controller"].ToString() == "Home" ? "active" : "")">
                        <a style="color:#FFFFFF !important; font-size: 1.5rem;" class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Minors">Minors</a>
                    </li>
                    <!-- This code checks if the current action is "Employment" and controller is "Home". If so, it adds the "active" class to the <li> element. -->
                    <li class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Employment" && ViewContext.RouteData.Values["Controller"].ToString() == "Home" ? "active" : "")">
                        <a style="color:#FFFFFF !important; font-size: 1.5rem;" class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Employment">Employment</a>
                    </li>
                </ul>
            </div>
            </div>
        </nav>
    </header>
    <div class="container" style="padding-top:80px;">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Go to Top Button -->
    <button id="goToTopBtn" title="Go to Top">&#8679;</button>

    <!-- This code renders a partial view named "_Footer" asynchronously, passing the "FooterModel" from ViewData as the model for the partial view. -->
    @await Html.PartialAsync("_Footer", ViewData["FooterModel"] as FooterModel)

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.js" asp-append-version="true"></script>
    <script src="~/lib/jquery/dist/jquery.js" asp-append-version="true"></script>
    <script src="~/js/jquery-ui.js" asp-append-version="true"></script>
    <script src="~/js/jquery.modal.js" asp-append-version="true"></script>
    <script src="~/js/datatables.js" asp-append-version="true"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let maxWidth = 200;

            // Set the width of the nav menu
            const navMenu = document.querySelector('.nav-menu');
            if (navMenu) {
                navMenu.style.width = `${maxWidth}px`;
            }

            // Call the handleWindowResize function on page load
            handleWindowResize();
        });

        // Get the necessary elements
        const overrideButton = document.querySelector('.Override-Bootstrap-Button');
        const topLine = document.querySelector('.Override-Bootstrap-TOP');
        const middleLine = document.querySelector('.Override-Bootstrap-MIDDLE');
        const bottomLine = document.querySelector('.Override-Bootstrap-BOTTOM');

        // Flag to track the current state of the button
        let isMenuOpen = false;

        // Function to toggle the button animation
        function toggleButtonAnimation() {
            const navMenu = document.querySelector('.nav-menu');

            if (!isMenuOpen) {
                // Disable the button interaction
                overrideButton.style.pointerEvents = 'none';

                // Animate the lines
                topLine.style.animation = 'topLineAnimation 0.5s forwards';
                middleLine.style.animation = 'middleLineAnimation 0.5s forwards';
                bottomLine.style.animation = 'bottomLineAnimation 0.5s forwards';

                // Show the nav menu
                navMenu.classList.add('show-nav-menu');

                // Set the flag to true
                isMenuOpen = true;
                navMenu.style.display = 'block';

                // Re-enable the button interaction after the animation completes
                setTimeout(() => {
                    overrideButton.style.pointerEvents = 'auto';
                }, 500);
            } else {
                // Disable the button interaction
                overrideButton.style.pointerEvents = 'none';

                // Reverse the animation
                topLine.style.animation = 'reverseTopLineAnimation 0.5s forwards';
                middleLine.style.animation = 'reverseMiddleLineAnimation 0.5s forwards';
                bottomLine.style.animation = 'reverseBottomLineAnimation 0.5s forwards';

                // Hide the nav menu
                navMenu.classList.remove('show-nav-menu');
                navMenu.style.display = 'none';

                // Set the flag to false
                isMenuOpen = false;

                // Re-enable the button interaction after the animation completes
                setTimeout(() => {
                    overrideButton.style.pointerEvents = 'auto';
                }, 500);
            }                                                                                                                
        }

        // Add a click event listener to the button
        overrideButton.addEventListener('click', toggleButtonAnimation);

        // Function to handle window resize
        function handleWindowResize() {
            const navMenu = document.querySelector('.nav-menu');
            const breakpoint = 800;

            if (window.innerWidth < breakpoint) {
                // Set the nav-menu styles for smaller screens
                navMenu.style.display = 'none';
                navMenu.style.flexDirection = 'column';
                navMenu.style.position = 'fixed';
                navMenu.style.width = '250px';
                navMenu.style.height = '100%';
                navMenu.style.backgroundColor = '#F76902';
                navMenu.style.transform = 'none';
                navMenu.style.justifyContent = 'center';
                navMenu.style.alignItems = 'center';
                isMenuOpen = false;
                navMenu.classList.remove('show-nav-menu');
            } else {
                // Reset the nav-menu styles for larger screens
                navMenu.style.display = 'flex';
                navMenu.style.flexDirection = 'row';
                navMenu.style.position = 'static';
                navMenu.style.width = '100%';
                navMenu.style.height = 'auto';
                navMenu.style.backgroundColor = 'transparent';
                navMenu.style.transform = 'none';
                navMenu.style.justifyContent = 'flex-start';
                navMenu.style.alignItems = 'center';
                navMenu.classList.remove('show-nav-menu');
                isMenuOpen = false;
            }
        }

        // Add event listener for window resize
        window.addEventListener('resize', handleWindowResize);

        // Get the button
        let mybutton = document.getElementById("goToTopBtn");

        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                mybutton.style.display = "block";
            } else {
                mybutton.style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }

        // Attach the click event to the button
        mybutton.addEventListener("click", topFunction);
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>